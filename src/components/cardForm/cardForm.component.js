import React, { Component } from 'react';
import { connect } from 'react-redux';
import { v4 } from 'node-uuid';
import { createStructuredSelector } from 'reselect';

import Form from 'react-bootstrap/Form';
import { Button } from 'react-bootstrap';

import { addCard, editCard } from '../../redux/cards/cards.actions';
import { toggleModal } from '../../redux/modal/modal.actions';
import { selectCurrentCardData } from '../../redux/cards/cards.selector';

class FormComponent extends Component {

    state = {
        id: '',
        name: '',
        description: '',
        imageUrl: ''
    };
    
    idCard = null;

    componentDidMount() {

        if ( this.props.currentCard ) {
            this.setState( ...this.state, this.props.currentCard );
        }
    }

    onSubmitHandler = (e) => {
        e.preventDefault();

        console.log(this.idCard);
        
        if( this.props.currentCard.id ){
            this.props.editCard( this.state );
        }
        else
        {
            this.props.addCard( this.state );
        }
        
        this.props.showModal();
     
    }

    onChangeHandler = (e) => {

        const { name, value } = e.target;

        this.setState({ [name]: value },
            () => {
                if ( !this.state.imageUrl || this.state.imageUrl.search(".png|.jpg") === -1 ) {
                    this.setState({ imageUrl: require('../../assets/img/noImage.jpg') });
                }
                if ( !this.state.id ) {
                    this.setState({ id: this.idCard });
                }
            }
        );

        
    }
    
    render() {

        console.log(this.props.currentCard);
       
        this.idCard = this.props.currentCard.id ? this.props.currentCard.id : v4();
        
        const { name, imageUrl, description } = this.props.currentCard;

        return(
            <Form onSubmit={ (e) => this.onSubmitHandler(e) }>
                <Form.Group controlId="id">
                    <Form.Label>ID</Form.Label>
                    <Form.Control 
                        type="id" 
                        defaultValue={ this.idCard } 
                        name="id"
                        onChange={ this.onChangeHandler } 
                        readOnly/>
                    <Form.Text className="text-muted">
                        This field is autogenerated.
                    </Form.Text>
                </Form.Group>

                <Form.Group controlId="name">
                    <Form.Label>Name</Form.Label>
                    <Form.Control 
                        type="text"
                        name="name"
                        defaultValue={ name }
                        onChange={ this.onChangeHandler } 
                        required/>
                </Form.Group>

                <Form.Group controlId="url">
                    <Form.Label>ImageURL</Form.Label>
                    <Form.Control 
                        type="text"
                        name="imageUrl" 
                        defaultValue={ imageUrl } 
                        onChange={ this.onChangeHandler }
                        />
                        <Form.Text className="text-muted">
                        Only .jpg or .png extensions.
                    </Form.Text>
                </Form.Group>

                <Form.Group controlId="price">
                    <Form.Label>Description</Form.Label>
                    <Form.Control 
                        type="text"
                        name="description"
                        defaultValue={ description }
                        onChange={ this.onChangeHandler }
                        required/>
                </Form.Group>
                
                <Button variant="primary" type="submit">
                    Save
                </Button>
              
            </Form>
        )
    };

};

const mapStateToProps = createStructuredSelector({

    currentCard: selectCurrentCardData
    
});

const mapDispatchToProps = dispatch => {
    return {
        showModal: () => dispatch( toggleModal() ),
        editCard: ( cardItem ) => dispatch( editCard(cardItem) ),
        addCard: ( cardItem ) => dispatch( addCard(cardItem) ),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(FormComponent);